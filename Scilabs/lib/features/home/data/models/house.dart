import 'package:scilabs/features/home/data/models/b-extwe.dart';
import 'package:scilabs/features/home/data/models/b5.dart';
import 'package:scilabs/features/home/data/models/coefficient-of-performance.dart';
import 'package:scilabs/features/home/data/models/rhmw-therm.dart';

import '../../domain/entities/house.dart';
import 'active-power.dart';
import 'active.dart';
import 'exhaust-air-temperature-class.dart';

class HouseModel extends House {
  HouseModel({
    timeInstant,
    activePower,
    b5,
    b6,
    bExtwe,
    bGsiv1,
    bGsiv2,
    bVWw,
    coefficientOfPerformance,
    compressorPower,
    compressorStartCount,
    condensationPressure,
    diP5,
    diP6,
    diP7,
    diP8,
    diPBatAc,
    diPBatt,
    diPBattDc,
    diPBattPump,
    diPBattSoc,
    diPBooster,
    diPComp,
    diPEheiz,
    diPHaus,
    diPNetz,
    diPNetz2,
    diPPheizung,
    diPPquelle,
    diPSolar,
    diPTwwEcopac,
    diPVent,
    diPW2,
    diPWp,
    diPthermHzg,
    diPthermWp,
    diPthermWw,
    electricalHeatingActive,
    electricalHeatingPower,
    evaporationPressure,
    exhaustAirTemperature,
    expansionValveOpeningDegree,
    floorHeatingFlowTemperature,
    floorHeatingReturnFlowSetTemperature,
    floorHeatingReturnFlowTemperature,
    freshAirTemperature,
    gridPower,
    heatOutput,
    heatOutputHeating,
    heatOutputHotWater,
    heatingPumpPower,
    hotWaterActive,
    hotWaterSetTemperature,
    hotWaterTemperature,
    i2,
    i3,
    iBattCyc,
    iCountStartComp,
    iHousenum,
    iPBattCyc,
    id,
    outdoorTemperature,
    photovoltaicPower,
    rHmWtherm,
    rCop,
    rHmFlow,
    rHmSum,
    rHmTempa,
    rHmTempb,
    rHmTempdiff,
    rPBooster,
    rPPheizung,
    rPPquelle,
    rPTwwEcopack,
    rPVent,
    rPrccp,
    rPrchsp,
    rPrcond,
    rPrcteev,
    rPrevap,
    rTempAbl,
    rTempAul,
    rTempAussen,
    rTempAussen24H,
    rTempFol,
    rTempGsigia,
    rTempGsigiaRet,
    rTempGsisa,
    rTempGsisaRet,
    rTempQaus,
    rTempQausEpb,
    rTempQein,
    rTempQeinEpb,
    rTempRaum,
    rTempRl,
    rTempRlsoll,
    rTempVl,
    rTempWwist,
    rTempWwsoll,
    rTempZul,
    rTempout1,
    rTempsucg,
    returnAirTemperature,
    sourceInTemperature,
    sourceOutTemperature,
    sourcePumpPower,
    stateOfCharge,
    suctionGasTemperature,
    supplyAirTemperature,
    type,
    ventilationPower,
    w5052DoBmE1,
    w5053ErrorE1,
    w5054Inte1,
    w5055DoBmE1,
  }) : super(
          timeInstant: timeInstant,
          activePower: activePower,
          b5: b5,
          b6: b6,
          bExtwe: bExtwe,
          bGsiv1: bGsiv1,
          bGsiv2: bGsiv2,
          bVWw: bVWw,
          coefficientOfPerformance: coefficientOfPerformance,
          compressorPower: compressorPower,
          compressorStartCount: compressorStartCount,
          condensationPressure: condensationPressure,
          diP5: diP5,
          diP6: diP6,
          diP7: diP7,
          diP8: diP8,
          diPBatAc: diPBatAc,
          diPBatt: diPBatt,
          diPBattDc: diPBattDc,
          diPBattPump: diPBattPump,
          diPBattSoc: diPBattSoc,
          diPBooster: diPBooster,
          diPComp: diPComp,
          diPEheiz: diPEheiz,
          diPHaus: diPHaus,
          diPNetz: diPNetz,
          diPNetz2: diPNetz2,
          diPPheizung: diPPheizung,
          diPPquelle: diPPquelle,
          diPSolar: diPSolar,
          diPTwwEcopac: diPTwwEcopac,
          diPVent: diPVent,
          diPW2: diPW2,
          diPWp: diPWp,
          diPthermHzg: diPthermHzg,
          diPthermWp: diPthermWp,
          diPthermWw: diPthermWw,
          electricalHeatingActive: electricalHeatingActive,
          electricalHeatingPower: electricalHeatingPower,
          evaporationPressure: evaporationPressure,
          exhaustAirTemperature: exhaustAirTemperature,
          expansionValveOpeningDegree: expansionValveOpeningDegree,
          floorHeatingFlowTemperature: floorHeatingFlowTemperature,
          floorHeatingReturnFlowSetTemperature:
              floorHeatingReturnFlowSetTemperature,
          floorHeatingReturnFlowTemperature: floorHeatingReturnFlowTemperature,
          freshAirTemperature: freshAirTemperature,
          gridPower: gridPower,
          heatOutput: heatOutput,
          heatOutputHeating: heatOutputHeating,
          heatOutputHotWater: heatOutputHotWater,
          heatingPumpPower: heatingPumpPower,
          hotWaterActive: hotWaterActive,
          hotWaterSetTemperature: hotWaterSetTemperature,
          hotWaterTemperature: hotWaterTemperature,
          i2: i2,
          i3: i3,
          iBattCyc: iBattCyc,
          iCountStartComp: iCountStartComp,
          iHousenum: iHousenum,
          iPBattCyc: iPBattCyc,
          id: id,
          outdoorTemperature: outdoorTemperature,
          photovoltaicPower: photovoltaicPower,
          rHmWtherm: rHmWtherm,
          rCop: rCop,
          rHmFlow: rHmFlow,
          rHmSum: rHmSum,
          rHmTempa: rHmTempa,
          rHmTempb: rHmTempb,
          rHmTempdiff: rHmTempdiff,
          rPBooster: rPBooster,
          rPPheizung: rPPheizung,
          rPPquelle: rPPquelle,
          rPTwwEcopack: rPTwwEcopack,
          rPVent: rPVent,
          rPrccp: rPrccp,
          rPrchsp: rPrchsp,
          rPrcond: rPrcond,
          rPrcteev: rPrcteev,
          rPrevap: rPrevap,
          rTempAbl: rTempAbl,
          rTempAul: rTempAul,
          rTempAussen: rTempAussen,
          rTempAussen24H: rTempAussen24H,
          rTempFol: rTempFol,
          rTempGsigia: rTempGsigia,
          rTempGsigiaRet: rTempGsigiaRet,
          rTempGsisa: rTempGsisa,
          rTempGsisaRet: rTempGsisaRet,
          rTempQaus: rTempQaus,
          rTempQausEpb: rTempQausEpb,
          rTempQein: rTempQein,
          rTempQeinEpb: rTempQeinEpb,
          rTempRaum: rTempRaum,
          rTempRl: rTempRl,
          rTempRlsoll: rTempRlsoll,
          rTempVl: rTempVl,
          rTempWwist: rTempWwist,
          rTempWwsoll: rTempWwsoll,
          rTempZul: rTempZul,
          rTempout1: rTempout1,
          rTempsucg: rTempsucg,
          returnAirTemperature: returnAirTemperature,
          sourceInTemperature: sourceInTemperature,
          sourceOutTemperature: sourceOutTemperature,
          sourcePumpPower: sourcePumpPower,
          stateOfCharge: stateOfCharge,
          suctionGasTemperature: suctionGasTemperature,
          supplyAirTemperature: supplyAirTemperature,
          type: type,
          ventilationPower: ventilationPower,
          w5052DoBmE1: w5052DoBmE1,
          w5053ErrorE1: w5053ErrorE1,
          w5054Inte1: w5054Inte1,
          w5055DoBmE1: w5055DoBmE1,
        );

  /* Map<String, dynamic> toJson() => {
        "TimeInstant": timeInstant.toJson(),
        "activePower": activePower.toJson(),
        "b_5": b5.toJson(),
        "b_6": b6.toJson(),
        "b_extwe": bExtwe.toJson(),
        "b_gsiv1": bGsiv1.toJson(),
        "b_gsiv2": bGsiv2.toJson(),
        "b_v_ww": bVWw.toJson(),
        "coefficientOfPerformance": coefficientOfPerformance.toJson(),
        "compressorPower": compressorPower.toJson(),
        "compressorStartCount": compressorStartCount.toJson(),
        "condensationPressure": condensationPressure.toJson(),
        "di_p_5": diP5.toJson(),
        "di_p_6": diP6.toJson(),
        "di_p_7": diP7.toJson(),
        "di_p_8": diP8.toJson(),
        "di_p_bat_ac": diPBatAc.toJson(),
        "di_p_batt": diPBatt.toJson(),
        "di_p_batt_dc": diPBattDc.toJson(),
        "di_p_batt_pump": diPBattPump.toJson(),
        "di_p_batt_soc": diPBattSoc.toJson(),
        "di_p_booster": diPBooster.toJson(),
        "di_p_comp": diPComp.toJson(),
        "di_p_eheiz": diPEheiz.toJson(),
        "di_p_haus": diPHaus.toJson(),
        "di_p_netz": diPNetz.toJson(),
        "di_p_netz2": diPNetz2.toJson(),
        "di_p_pheizung": diPPheizung.toJson(),
        "di_p_pquelle": diPPquelle.toJson(),
        "di_p_solar": diPSolar.toJson(),
        "di_p_tww_ecopac": diPTwwEcopac.toJson(),
        "di_p_vent": diPVent.toJson(),
        "di_p_w2": diPW2.toJson(),
        "di_p_wp": diPWp.toJson(),
        "di_ptherm_hzg": diPthermHzg.toJson(),
        "di_ptherm_wp": diPthermWp.toJson(),
        "di_ptherm_ww": diPthermWw.toJson(),
        "electricalHeatingActive": electricalHeatingActive.toJson(),
        "electricalHeatingPower": electricalHeatingPower.toJson(),
        "evaporationPressure": evaporationPressure.toJson(),
        "exhaustAirTemperature": exhaustAirTemperature.toJson(),
        "expansionValveOpeningDegree": expansionValveOpeningDegree.toJson(),
        "floorHeatingFlowTemperature": floorHeatingFlowTemperature.toJson(),
        "floorHeatingReturnFlowSetTemperature":
            floorHeatingReturnFlowSetTemperature.toJson(),
        "floorHeatingReturnFlowTemperature":
            floorHeatingReturnFlowTemperature.toJson(),
        "freshAirTemperature": freshAirTemperature.toJson(),
        "gridPower": gridPower.toJson(),
        "heatOutput": heatOutput.toJson(),
        "heatOutputHeating": heatOutputHeating.toJson(),
        "heatOutputHotWater": heatOutputHotWater.toJson(),
        "heatingPumpPower": heatingPumpPower.toJson(),
        "hotWaterActive": hotWaterActive.toJson(),
        "hotWaterSetTemperature": hotWaterSetTemperature.toJson(),
        "hotWaterTemperature": hotWaterTemperature.toJson(),
        "i_2": i2.toJson(),
        "i_3": i3.toJson(),
        "i_batt_cyc": iBattCyc.toJson(),
        "i_count_start_comp": iCountStartComp.toJson(),
        "i_housenum": iHousenum.toJson(),
        "i_p_batt_cyc": iPBattCyc.toJson(),
        "id": id,
        "outdoorTemperature": outdoorTemperature.toJson(),
        "photovoltaicPower": photovoltaicPower.toJson(),
        "r_HM_Wtherm": rHmWtherm.toJson(),
        "r_cop": rCop.toJson(),
        "r_hm_flow": rHmFlow.toJson(),
        "r_hm_sum": rHmSum.toJson(),
        "r_hm_tempa": rHmTempa.toJson(),
        "r_hm_tempb": rHmTempb.toJson(),
        "r_hm_tempdiff": rHmTempdiff.toJson(),
        "r_p_booster": rPBooster.toJson(),
        "r_p_pheizung": rPPheizung.toJson(),
        "r_p_pquelle": rPPquelle.toJson(),
        "r_p_tww_ecopack": rPTwwEcopack.toJson(),
        "r_p_vent": rPVent.toJson(),
        "r_prccp": rPrccp.toJson(),
        "r_prchsp": rPrchsp.toJson(),
        "r_prcond": rPrcond.toJson(),
        "r_prcteev": rPrcteev.toJson(),
        "r_prevap": rPrevap.toJson(),
        "r_temp_abl": rTempAbl.toJson(),
        "r_temp_aul": rTempAul.toJson(),
        "r_temp_aussen": rTempAussen.toJson(),
        "r_temp_aussen24h": rTempAussen24H.toJson(),
        "r_temp_fol": rTempFol.toJson(),
        "r_temp_gsigia": rTempGsigia.toJson(),
        "r_temp_gsigia_ret": rTempGsigiaRet.toJson(),
        "r_temp_gsisa": rTempGsisa.toJson(),
        "r_temp_gsisa_ret": rTempGsisaRet.toJson(),
        "r_temp_qaus": rTempQaus.toJson(),
        "r_temp_qaus_epb": rTempQausEpb.toJson(),
        "r_temp_qein": rTempQein.toJson(),
        "r_temp_qein_epb": rTempQeinEpb.toJson(),
        "r_temp_raum": rTempRaum.toJson(),
        "r_temp_rl": rTempRl.toJson(),
        "r_temp_rlsoll": rTempRlsoll.toJson(),
        "r_temp_vl": rTempVl.toJson(),
        "r_temp_wwist": rTempWwist.toJson(),
        "r_temp_wwsoll": rTempWwsoll.toJson(),
        "r_temp_zul": rTempZul.toJson(),
        "r_tempout1": rTempout1.toJson(),
        "r_tempsucg": rTempsucg.toJson(),
        "returnAirTemperature": returnAirTemperature.toJson(),
        "sourceInTemperature": sourceInTemperature.toJson(),
        "sourceOutTemperature": sourceOutTemperature.toJson(),
        "sourcePumpPower": sourcePumpPower.toJson(),
        "stateOfCharge": stateOfCharge.toJson(),
        "suctionGasTemperature": suctionGasTemperature.toJson(),
        "supplyAirTemperature": supplyAirTemperature.toJson(),
        "type": type,
        "ventilationPower": ventilationPower.toJson(),
        "w_5052_do_bm_e1": w5052DoBmE1.toJson(),
        "w_5053_error_e1": w5053ErrorE1.toJson(),
        "w_5054_inte1": w5054Inte1.toJson(),
        "w_5055_do_bm_e1": w5055DoBmE1.toJson(),
      };*/

  factory HouseModel.fromJson(Map<String, dynamic> json) => HouseModel(
        timeInstant:
            ExhaustAirTemperatureClassModel.fromJson(json["TimeInstant"]),
        activePower: ActivePowerModel.fromJson(json["activePower"]),
        b5: B5Model.fromJson(json["b_5"]),
        b6: B5Model.fromJson(json["b_6"]),
        bExtwe: BExtweModel.fromJson(json["b_extwe"]),
        bGsiv1: BExtweModel.fromJson(json["b_gsiv1"]),
        bGsiv2: BExtweModel.fromJson(json["b_gsiv2"]),
        bVWw: BExtweModel.fromJson(json["b_v_ww"]),
        coefficientOfPerformance: CoefficientOfPerformanceModel.fromJson(
            json["coefficientOfPerformance"]),
        compressorPower: ActivePowerModel.fromJson(json["compressorPower"]),
        compressorStartCount: CoefficientOfPerformanceModel.fromJson(
            json["compressorStartCount"]),
        condensationPressure: CoefficientOfPerformanceModel.fromJson(
            json["condensationPressure"]),
        diP5: B5Model.fromJson(json["di_p_5"]),
        diP6: B5Model.fromJson(json["di_p_6"]),
        diP7: B5Model.fromJson(json["di_p_7"]),
        diP8: B5Model.fromJson(json["di_p_8"]),
        diPBatAc: BExtweModel.fromJson(json["di_p_bat_ac"]),
        diPBatt: BExtweModel.fromJson(json["di_p_batt"]),
        diPBattDc: BExtweModel.fromJson(json["di_p_batt_dc"]),
        diPBattPump: BExtweModel.fromJson(json["di_p_batt_pump"]),
        diPBattSoc: BExtweModel.fromJson(json["di_p_batt_soc"]),
        diPBooster: BExtweModel.fromJson(json["di_p_booster"]),
        diPComp: B5Model.fromJson(json["di_p_comp"]),
        diPEheiz: BExtweModel.fromJson(json["di_p_eheiz"]),
        diPHaus: BExtweModel.fromJson(json["di_p_haus"]),
        diPNetz: BExtweModel.fromJson(json["di_p_netz"]),
        diPNetz2: B5Model.fromJson(json["di_p_netz2"]),
        diPPheizung: BExtweModel.fromJson(json["di_p_pheizung"]),
        diPPquelle: BExtweModel.fromJson(json["di_p_pquelle"]),
        diPSolar: BExtweModel.fromJson(json["di_p_solar"]),
        diPTwwEcopac: BExtweModel.fromJson(json["di_p_tww_ecopac"]),
        diPVent: BExtweModel.fromJson(json["di_p_vent"]),
        diPW2: BExtweModel.fromJson(json["di_p_w2"]),
        diPWp: BExtweModel.fromJson(json["di_p_wp"]),
        diPthermHzg: BExtweModel.fromJson(json["di_ptherm_hzg"]),
        diPthermWp: BExtweModel.fromJson(json["di_ptherm_wp"]),
        diPthermWw: BExtweModel.fromJson(json["di_ptherm_ww"]),
        electricalHeatingActive:
            ActiveModel.fromJson(json["electricalHeatingActive"]),
        electricalHeatingPower:
            ActivePowerModel.fromJson(json["electricalHeatingPower"]),
        evaporationPressure:
            CoefficientOfPerformanceModel.fromJson(json["evaporationPressure"]),
        exhaustAirTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["exhaustAirTemperature"]),
        expansionValveOpeningDegree: CoefficientOfPerformanceModel.fromJson(
            json["expansionValveOpeningDegree"]),
        floorHeatingFlowTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["floorHeatingFlowTemperature"]),
        floorHeatingReturnFlowSetTemperature:
            ExhaustAirTemperatureClassModel.fromJson(
                json["floorHeatingReturnFlowSetTemperature"]),
        floorHeatingReturnFlowTemperature:
            ExhaustAirTemperatureClassModel.fromJson(
                json["floorHeatingReturnFlowTemperature"]),
        freshAirTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["freshAirTemperature"]),
        gridPower: CoefficientOfPerformanceModel.fromJson(json["gridPower"]),
        heatOutput: ActivePowerModel.fromJson(json["heatOutput"]),
        heatOutputHeating: ActivePowerModel.fromJson(json["heatOutputHeating"]),
        heatOutputHotWater:
            ActivePowerModel.fromJson(json["heatOutputHotWater"]),
        heatingPumpPower:
            ExhaustAirTemperatureClassModel.fromJson(json["heatingPumpPower"]),
        hotWaterActive: ActiveModel.fromJson(json["hotWaterActive"]),
        hotWaterSetTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["hotWaterSetTemperature"]),
        hotWaterTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["hotWaterTemperature"]),
        i2: B5Model.fromJson(json["i_2"]),
        i3: B5Model.fromJson(json["i_3"]),
        iBattCyc: BExtweModel.fromJson(json["i_batt_cyc"]),
        iCountStartComp: B5Model.fromJson(json["i_count_start_comp"]),
        iHousenum: B5Model.fromJson(json["i_housenum"]),
        iPBattCyc:
            ExhaustAirTemperatureClassModel.fromJson(json["i_p_batt_cyc"]),
        id: json["id"],
        outdoorTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["outdoorTemperature"]),
        photovoltaicPower:
            CoefficientOfPerformanceModel.fromJson(json["photovoltaicPower"]),
        rHmWtherm: RHmWthermModel.fromJson(json["r_HM_Wtherm"]),
        rCop: B5Model.fromJson(json["r_cop"]),
        rHmFlow: ExhaustAirTemperatureClassModel.fromJson(json["r_hm_flow"]),
        rHmSum: ExhaustAirTemperatureClassModel.fromJson(json["r_hm_sum"]),
        rHmTempa: ExhaustAirTemperatureClassModel.fromJson(json["r_hm_tempa"]),
        rHmTempb: ExhaustAirTemperatureClassModel.fromJson(json["r_hm_tempb"]),
        rHmTempdiff:
            ExhaustAirTemperatureClassModel.fromJson(json["r_hm_tempdiff"]),
        rPBooster: ActivePowerModel.fromJson(json["r_p_booster"]),
        rPPheizung: ActivePowerModel.fromJson(json["r_p_pheizung"]),
        rPPquelle: ActivePowerModel.fromJson(json["r_p_pquelle"]),
        rPTwwEcopack: ActivePowerModel.fromJson(json["r_p_tww_ecopack"]),
        rPVent: ActivePowerModel.fromJson(json["r_p_vent"]),
        rPrccp: BExtweModel.fromJson(json["r_prccp"]),
        rPrchsp: BExtweModel.fromJson(json["r_prchsp"]),
        rPrcond: BExtweModel.fromJson(json["r_prcond"]),
        rPrcteev: BExtweModel.fromJson(json["r_prcteev"]),
        rPrevap: BExtweModel.fromJson(json["r_prevap"]),
        rTempAbl: BExtweModel.fromJson(json["r_temp_abl"]),
        rTempAul: BExtweModel.fromJson(json["r_temp_aul"]),
        rTempAussen: BExtweModel.fromJson(json["r_temp_aussen"]),
        rTempAussen24H: BExtweModel.fromJson(json["r_temp_aussen24h"]),
        rTempFol: BExtweModel.fromJson(json["r_temp_fol"]),
        rTempGsigia: BExtweModel.fromJson(json["r_temp_gsigia"]),
        rTempGsigiaRet: BExtweModel.fromJson(json["r_temp_gsigia_ret"]),
        rTempGsisa: BExtweModel.fromJson(json["r_temp_gsisa"]),
        rTempGsisaRet: BExtweModel.fromJson(json["r_temp_gsisa_ret"]),
        rTempQaus: BExtweModel.fromJson(json["r_temp_qaus"]),
        rTempQausEpb: BExtweModel.fromJson(json["r_temp_qaus_epb"]),
        rTempQein: BExtweModel.fromJson(json["r_temp_qein"]),
        rTempQeinEpb: BExtweModel.fromJson(json["r_temp_qein_epb"]),
        rTempRaum: BExtweModel.fromJson(json["r_temp_raum"]),
        rTempRl: BExtweModel.fromJson(json["r_temp_rl"]),
        rTempRlsoll: BExtweModel.fromJson(json["r_temp_rlsoll"]),
        rTempVl: BExtweModel.fromJson(json["r_temp_vl"]),
        rTempWwist: BExtweModel.fromJson(json["r_temp_wwist"]),
        rTempWwsoll: BExtweModel.fromJson(json["r_temp_wwsoll"]),
        rTempZul: BExtweModel.fromJson(json["r_temp_zul"]),
        rTempout1: BExtweModel.fromJson(json["r_tempout1"]),
        rTempsucg: BExtweModel.fromJson(json["r_tempsucg"]),
        returnAirTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["returnAirTemperature"]),
        sourceInTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["sourceInTemperature"]),
        sourceOutTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["sourceOutTemperature"]),
        sourcePumpPower:
            ExhaustAirTemperatureClassModel.fromJson(json["sourcePumpPower"]),
        stateOfCharge:
            CoefficientOfPerformanceModel.fromJson(json["stateOfCharge"]),
        suctionGasTemperature: CoefficientOfPerformanceModel.fromJson(
            json["suctionGasTemperature"]),
        supplyAirTemperature: ExhaustAirTemperatureClassModel.fromJson(
            json["supplyAirTemperature"]),
        type: json["type"],
        ventilationPower:
            ExhaustAirTemperatureClassModel.fromJson(json["ventilationPower"]),
        w5052DoBmE1: B5Model.fromJson(json["w_5052_do_bm_e1"]),
        w5053ErrorE1: B5Model.fromJson(json["w_5053_error_e1"]),
        w5054Inte1: B5Model.fromJson(json["w_5054_inte1"]),
        w5055DoBmE1: B5Model.fromJson(json["w_5055_do_bm_e1"]),
      );
}
